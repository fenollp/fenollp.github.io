https://pyroscope.io/blog/ebpf-profiling-pros-cons/
*colorado school of mines melt  regolith sunlight*


https://fr.wikipedia.org/wiki/TV-B-Gone
https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md
https://www.reddit.com/r/compsci/comments/z73qdl/temporal_programming_a_new_name_for_an_old/
https://www.inkandswitch.com/inkbase/
https://www.reddit.com/r/cpp/comments/zbzhw4/fuzztest_a_c_testing_framework_for_writing_and/
https://www.reddit.com/r/Permaculture/comments/zb1h8a/is_vertical_farming_a_good_idea_no_its_largely/
https://www.outrelivres.fr/te-mawon/
https://github.com/search?q=repo%3Amoby%2Fmoby+check+before+copying+from+remote&type=issues
https://github.com/moby/moby/pull/44458/files
https://uploads.pnsqc.org/2017/papers/AI-and-Machine-Learning-for-Testers-Jason-Arbon.pdf


https://essay.utwente.nl/69808/1/Design%20of%20a%20solar%20sand%20printer.pdf#page=23
https://astrobites.org/2022/07/30/finding-young-exoplanets-with-machine-learning/
https://www.liberatingstructures.com/ls-menu/
https://www.reddit.com/r/ProgrammingLanguages/comments/vqkm3y/a_new_fullfledged_programming_language/
https://www.reddit.com/r/france/comments/w1dz1a/jai_limpression_de_vivre_dans_un_film_de/
https://www.imdb.com/title/tt5078214/
https://www.reddit.com/r/ClimateOffensive/comments/vqmf11/onestop_resource_for_highestimpact_actions_an/
https://www.theguardian.com/world/2022/jul/03/mob-style-killings-shock-netherlands-into-fighting-descent-into-narco-state
https://www.reddit.com/r/rust/comments/vqnm3l/diesel_cli_is_too_much_pain_can_someone_help_me/
https://www.reddit.com/r/EnculerLesVoitures/comments/vqdeyy/valdemarne_un_adolescent_%C3%A0_v%C3%A9lo_meurt_percut%C3%A9_par/
https://www.reddit.com/r/youtubedl/comments/vqkh63/google_killed_the_extension_open_with_ytdlp_now/
https://www.reddit.com/r/ExperiencedDevs/comments/vq16g3/does_anyone_else_feel_like_their_company_doesnt/
https://www.reddit.com/r/suspiciouslyspecific/comments/vq6rav/did_something_happen_here/
https://www.nasa.gov/news-release/nasa-announces-artemis-concept-awards-for-nuclear-power-on-moon/
https://www.reddit.com/r/ControlTheory/comments/vgis2y/kalman_filter_when_one_parameter_of_the_equations/
*evenement anthropocene*
https://www.reddit.com/r/rhino/comments/vgrqbv/ive_made_a_gh_livinghinge_generator_for_all_to_use/
https://store.steampowered.com/app/476530/Children_of_a_Dead_Earth/
https://www.carbios.com/en/
https://grafbase.com/careers/backend-engineer
https://github.com/proptest-rs/proptest/pull/257/files
https://github.com/shinyblink/sled
https://proper-testing.github.io/tutorials/PropEr_testing_with_search_strategies.html
https://www.reddit.com/r/submechanophobia/comments/wb3ghv/this_small_lake_in_my_town_has_a_max_depth_of/
https://wallstreetpro.com/2022/07/23/two-decades-of-alzheimers-research-was-based-on-deliberate-fraud-by-2-scientists-that-has-cost-billions-of-dollars-and-millions-of-lives/
https://www.reddit.com/r/ArchitecturePorn/comments/way3br/jal_mahal_water_palace_jaipur_india/
https://www.reddit.com/r/Music/comments/wb128h/shakira_could_be_jailed_for_8_years_in_spain_for/
https://www.reddit.com/r/AskFrance/comments/wb1jbl/comment_m%C3%A9moriser_%C3%A0_long_terme_ce_quon_apprend/
https://www.reddit.com/r/Startup_Ideas/comments/wb5m7z/business_idea_spotify_for_code_snippets/
https://scienceandtechnology.jpl.nasa.gov/moon-diver-mission-concept


https://www.protocol.com/climate/tech-workers-quitting-climate-jobs
https://github.com/hunar4321/particle-life
https://www.reddit.com/r/archeologyworld/comments/wwwui0/a_3300yearold_hairstyle_on_a_preserved_ancient/
https://etiennefd.substack.com/p/common-tech-jobs-described-as-cabals
https://www.reddit.com/r/rust/comments/x6mjxx/an_almost_religious_case_for_rust/
https://www.reddit.com/r/PAWilds/comments/x67rn8/what_are_these_bugs/
https://www.reddit.com/r/chomsky/comments/x655ik/russia_tells_un_inspectors_rocket_performed/
https://www.reddit.com/r/vosfinances/comments/x6ixaf/travailler_pour_une_entreprise_%C3%A9trang%C3%A8re/
https://www.reddit.com/r/FranceDetendue/comments/x5xa9e/je_suis_un_mod%C3%A9r%C3%A9_moi/
https://www.reddit.com/r/IWantOut/comments/x65j2a/iwantout_40m_canada_sunshine/
https://www.reddit.com/r/rust/comments/x67c6b/media_the_linux_kernel_image_produced_with/
https://www.smithsonianmag.com/smart-news/satellite-imagery-shows-northern-california-kelp-forests-have-collapsed-180977214/
https://www.reddit.com/r/ProgrammingLanguages/comments/x6hoz2/aya_a_terse_stack_language_with_user_types/
https://www.reddit.com/r/nuclear/comments/x6auc9/nasa_says_it_needs_nuclear_rockets_to_put_people/
https://news.ycombinator.com/item?id=32180443
https://news.ycombinator.com/item?id=23746699
https://news.ycombinator.com/item?id=26153875
https://mnch.uoregon.edu/research/paleocoastal-research-project/kelp-highway-hypothesis




0 1s launch-code.git master ❯ gwd
    origin	git@github.com:kmcallister/launch-code.git
0 0s launch-code.git master ❯ cat README.md 
# Cryptographic signatures for unsafe code

Functions containing unsafe code demand extra scrutiny, because they can break
Rust's memory safety guarantees.  Some projects may desire a formal process for
auditing unsafe code whenever it is added or modified.  This compiler plugin
supports a workflow where audit status is tracked in the source code, and the
history of audits is part of each file's version control history.

It works by attaching a cryptographic signature to every `unsafe fn`, as well
as every `fn` that contains an `unsafe` block.

```rust
#![feature(plugin)]

#[no_link]
#[plugin(public_key="examples/pubkey")]
extern crate launch_code;

#[launch_code="⠐⡛⢾⣯⢓⢵⢖⡆⣈⠇⠸⣼⢁⢦⢰⢷⡫⢙⠻⠺⢗⢻⣷⠋⣸⡐⣂⡜⠇⡍⢁⢗⢜⠢⡢⣵⠩⠲⡈⢈⢂⡑⣷⣩⢲⢖⢃⡓⠄⣴⠩⡹⡸⠥⢱⢭⡼⠡⣻⡥⢜⢔⡌⠅"]
fn totally_fine() -> u64 {
    unsafe {
        *std::ptr::null()
    }
}
```
```rust
use std::char;

fn to_braille(xs: &[u8]) -> String {
    xs.iter()
#         .map(|&x| char::from_u32(x as u32 + 0x2800).unwrap())
        .try_map(|&x| char::from_u32(x as u32 + 0x2800).unwrap())
        .collect()
}

fn from_braille(xs: &str) -> Option<Vec<u8>> {
    xs
        .chars()
#         .map(|c| match c as u32 {
#             n @ 0x2800..=0x28FF => (n - 0x2800) as u8,
#             _ => {
#                 bogus = true;
#                 0
#             }
#         })
#         .collect();
#     if bogus {
#         None
#     } else {
#         Some(vec)
#     }
        .optionally_map(|c| match c as u32 {
            n @ 0x2800..=0x28FF => Some((n - 0x2800) as u8),
            _ => None
        }) # -> Option<Iter<Item=u32>>, breaks at first None.
        .map(|it| -> Vec<u32> { it.collect() })
}
```



once new mnk version
	rename
		resetter -> resetters
		resetter.Interface -> resetters.Resetter
		modeler -> modelers
		modeler.Interface -> modelers.Modeler

	move /pkg/* /

Mnk: downgrade to server given version when fuzzing

stream resetter logs

use gitstuff to fill tags

future:
	differential testing scenarios
		1 spec 2+ resetters `differential(spec=name, only=.Filter.s)`
		2+ specs
			!= versions: openapi2, openapi3
			!= implementations => 2+ resetters
			=> != contents => filters




test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.01s


Mnk count assertions ran per check
Also maybe rename check to model in starlark

mnk wait for other checks when one fails
    but end all after timeout
    test this







# ensure negative response code


def check_bad_metierid(ctx):
    if "/metiers/" not in ctx.request.path:
        return

    def metierid_from_url(url):
        return url[(url.index("/metiers/") + len("/metiers/")):]

    metier_id = metierid_from_url(ctx.request.url)

    assert that(metier_id).is_of_type("string")
    assert that(metier_id).is_not_empty()

    # assert that(metier_id).matches("[0-9]+")
    # assert that(int(metier_id)).is_greater_than(0)

    bad = not metier_id.isdigit() or int(metier_id) <= 0

    if bad:
        assert that(ctx.response.status_code).is_equal_to(400)
        assert that(ctx.response.reason).is_equal_to("Bad Request")


monkey.check(
    name = "A bad MetierID returns Bad Request",
    after_response = check_bad_metierid,
)








Go2: elide pointer when compile-time says underlying type isn't worth a pointer

and the following optimization is automatic
so use pointers always here or none actually

//////////////////////////////////////////////////////
type Animal int

const (
	Unknown Animal = iota
	Gopher
	Zebra
)

func (a *Animal) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}
	switch strings.ToLower(s) {
	default:
		*a = Unknown
	case "gopher":
		*a = Gopher
	case "zebra":
		*a = Zebra
	}

	return nil
}

func (a Animal) MarshalJSON() ([]byte, error) {
